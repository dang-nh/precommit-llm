"""
Constants used throughout the LLM pre-commit hook.
"""
from pathlib import Path
from typing import Dict, Any, List

# Default configuration
DEFAULT_CONFIG_FILENAME = ".llm-precommit.yml"
DEFAULT_CONFIG_PATHS = [
    DEFAULT_CONFIG_FILENAME,
    f".llm-precommit/config.yml",
    str(Path.home() / DEFAULT_CONFIG_FILENAME),
    str(Path.home() / ".llm-precommit/config.yml"),
]

# API settings
DEFAULT_API_KEY_ENV_VAR = "GEMINI_API_KEY"
DEFAULT_LLM_TYPE = "gemini"
DEFAULT_MODEL_NAME = "gemini-2.0-flash-exp"

# Available LLM models
AVAILABLE_MODELS = {
    "gemini": {
        "name": "Google Gemini",
        "default_model": "gemini-2.0-flash-exp",
        "env_var": "GEMINI_API_KEY",
        "models": [
            "gemini-2.0-flash-exp",
            "gemini-1.5-pro",
            "gemini-1.5-flash",
        ]
    }
}

# File settings
DEFAULT_MAX_FILE_SIZE_KB = 100
DEFAULT_INCLUDE_EXTENSIONS = [
    ".py", ".js", ".jsx", ".ts", ".tsx", ".css", ".html", ".go", ".java", ".c", ".cpp", ".rs"
]
DEFAULT_EXCLUDE_PATTERNS = [
    "node_modules/", "venv/", "env/", "__pycache__/", "*.min.js", "*.min.css", "build/", "dist/"
]

# CLI messages
CLI_INSTALL_SUCCESS = "Pre-commit hook installed at {}"
CLI_INSTALL_ERROR = "Error installing pre-commit hook: {}"
CLI_UNINSTALL_SUCCESS = "Pre-commit hook removed from {}"
CLI_UNINSTALL_ERROR = "Error uninstalling pre-commit hook: {}"
CLI_CONFIG_CREATE_SUCCESS = "Created default configuration file at {}"
CLI_CONFIG_CREATE_ERROR = "Error creating default configuration file: {}"
CLI_NO_STAGED_FILES = "No staged files found."
CLI_ANALYZING_FILE = "Analyzing {}..."
CLI_SKIPPING_FILE_SIZE = "Skipping {}: File size ({:.2f} KB) exceeds limit ({} KB)"
CLI_SKIPPING_NO_CHANGES = "Skipping {}: No changes detected"

# Default pre-commit hook template
DEFAULT_HOOK_TEMPLATE = """#!/bin/sh
# LLM pre-commit hook for code review
# Auto-generated by llm-precommit

{python_executable} {hook_script_path} "$@"
"""

# Default prompt template
DEFAULT_PROMPT_TEMPLATE = """
You are an expert code reviewer with deep knowledge of software engineering best practices, security, and performance optimization. Your task is to analyze the following code changes and provide high-quality, actionable feedback.

## Review Context
- File path: {file_path}
- Focus on identifying actionable issues that can improve code quality, security, and maintainability
- Consider both immediate problems and potential long-term implications

## Code to Review
Git diff:
```
{diff}
```

{full_content_section}

## Review Guidelines
Analyze the code for the following aspects:

1. **Bugs & Logic Issues**: 
   - Incorrect logic, edge cases, race conditions, null/undefined references
   - Off-by-one errors, incorrect loop conditions, potential exceptions

2. **Security Vulnerabilities**:
   - Injection vulnerabilities (SQL, Command, etc.)
   - Authentication/authorization issues
   - Insecure data handling
   - Hardcoded credentials
   - Insecure cryptographic practices

3. **Performance Issues**:
   - Inefficient algorithms or data structures
   - Unnecessary computations or memory usage
   - Resource leaks
   - N+1 query problems

4. **Code Style & Conventions**:
   - For Python: Follow PEP 8
   - For JavaScript/TypeScript: Follow ESLint standards
   - For Java: Follow Google Java Style Guide
   - For other languages: Follow industry standard conventions
   - Naming conventions, indentation, function length, complexity

5. **Documentation & Readability**:
   - Missing or unclear comments
   - Self-documenting code principles
   - Poor variable/function naming

## Language-Specific Guidelines
Depending on the file type, pay special attention to:

- **Python**: Type hints, docstrings, exception handling, context managers
- **JavaScript/TypeScript**: Asynchronous patterns, error handling, type safety
- **Java**: Exception handling, resource management, thread safety
- **CSS/HTML**: Accessibility, responsive design, semantic markup
- **SQL**: Injection prevention, query optimization
- **Go**: Error handling, goroutines, channels
- **C/C++**: Memory management, pointer safety, undefined behavior

## Response Format
Provide your feedback in the following JSON format:
{{
    "issues": [
        {{
            "severity": "critical|high|medium|low|info",
            "category": "bug|logic|syntax|typo|optimization",
            "description": "Clear description of the issue",
            "line_number": "line number or range (if applicable)",
            "code_snippet": "Relevant code snippet (if needed)",
            "suggestion": "Specific suggestion to fix the issue",
            "explanation": "Why this is a problem and why the suggested fix works"
        }}
    ],
    "coding_convention_issues": [
        {{
            "line_number": "line number or range",
            "convention": "The specific convention being violated",
            "description": "Description of the convention issue",
            "suggestion": "Suggestion to fix the issue"
        }}
    ],
    "security_concerns": [
        {{
            "severity": "critical|high|medium|low",
            "vulnerability_type": "injection|authentication|data-exposure|etc",
            "description": "Description of the security concern",
            "potential_impact": "What could happen if exploited",
            "suggestion": "Suggestion to address the security concern",
            "cwe_id": "Common Weakness Enumeration ID if applicable"
        }}
    ],
    "general_feedback": "Overall thoughts and general feedback about code quality, architecture, and design patterns",
    "positive_aspects": [
        "List of positive aspects of the code changes"
    ],
    "file_type": "The type of file (e.g., Python, JavaScript, HTML, etc.)",
    "summary": "A brief summary of the key findings (limit to 2-3 sentences)"
}}

Ensure your response is strictly in this JSON format and correctly escaped. Focus on providing specific, actionable feedback rather than general comments. Suggest real code fixes where possible.
"""
